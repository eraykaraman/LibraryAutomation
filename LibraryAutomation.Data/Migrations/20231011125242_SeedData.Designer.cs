// <auto-generated />
using System;
using LibraryAutomation.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryAutomation.Data.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20231011125242_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LibraryAutomation.Entity.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d0f5346e-0b4d-486a-8709-4158e92d36df"),
                            CreatedDate = new DateTime(2023, 10, 11, 15, 52, 42, 284, DateTimeKind.Local).AddTicks(7249),
                            LastName = "Martin",
                            Name = "George R.R."
                        });
                });

            modelBuilder.Entity("LibraryAutomation.Entity.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Page")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("UserId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5f0be9c-c43b-4f5a-9a95-706b1cd7e5a9"),
                            AuthorId = new Guid("d0f5346e-0b4d-486a-8709-4158e92d36df"),
                            CreatedDate = new DateTime(2023, 10, 11, 15, 52, 42, 284, DateTimeKind.Local).AddTicks(7494),
                            ImageURL = "https://i.dr.com.tr/cache/600x600-0/originals/0000000368432-1.jpg",
                            IsAvailable = true,
                            Name = "Taht Oyunları (A Game of Thrones)",
                            Page = 694,
                            ReleaseDate = new DateTime(1996, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("11223344-5566-7788-99aa-bbccddeeff00")
                        },
                        new
                        {
                            Id = new Guid("0ed82b98-0840-40aa-bbb0-1c70752411bd"),
                            AuthorId = new Guid("d0f5346e-0b4d-486a-8709-4158e92d36df"),
                            CreatedDate = new DateTime(2023, 10, 11, 15, 52, 42, 284, DateTimeKind.Local).AddTicks(7502),
                            ImageURL = "https://upload.wikimedia.org/wikipedia/tr/c/c2/Krallarin-Carpismasi.jpg",
                            IsAvailable = true,
                            Name = "Kralların Çarpışması (A Clash of Kings)",
                            Page = 761,
                            ReleaseDate = new DateTime(1998, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("11223344-5566-7788-99aa-bbccddeeff00")
                        },
                        new
                        {
                            Id = new Guid("735dd6d8-ff3f-44f5-a159-cd6d7aa3a190"),
                            AuthorId = new Guid("d0f5346e-0b4d-486a-8709-4158e92d36df"),
                            CreatedDate = new DateTime(2023, 10, 11, 15, 52, 42, 284, DateTimeKind.Local).AddTicks(7507),
                            ImageURL = "https://www.hobivizyon.com/UserFiles/Fotograflar/60205-9224-buyuk-jpg-9224-buyuk.jpg",
                            IsAvailable = true,
                            Name = "Kılıçların Fırtınası (A Storm of Swords)",
                            Page = 973,
                            ReleaseDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("11223344-5566-7788-99aa-bbccddeeff00")
                        },
                        new
                        {
                            Id = new Guid("e92090a9-206f-4b1b-9c65-50fd453886fc"),
                            AuthorId = new Guid("d0f5346e-0b4d-486a-8709-4158e92d36df"),
                            CreatedDate = new DateTime(2023, 10, 11, 15, 52, 42, 284, DateTimeKind.Local).AddTicks(7528),
                            ImageURL = "https://m.media-amazon.com/images/I/91eJCheb4gL._AC_UF894,1000_QL80_.jpg",
                            IsAvailable = true,
                            Name = "Kralların Toprağı (A Feast for Crows)",
                            Page = 753,
                            ReleaseDate = new DateTime(2005, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("11223344-5566-7788-99aa-bbccddeeff00")
                        },
                        new
                        {
                            Id = new Guid("b3a0cfaa-c81e-4ff4-9158-27af3d3743e8"),
                            AuthorId = new Guid("d0f5346e-0b4d-486a-8709-4158e92d36df"),
                            CreatedDate = new DateTime(2023, 10, 11, 15, 52, 42, 284, DateTimeKind.Local).AddTicks(7534),
                            ImageURL = "https://upload.wikimedia.org/wikipedia/tr/5/5d/Ejderhalarin-dansi.jpg",
                            IsAvailable = true,
                            Name = "Ejderhaların Dansı (A Dance with Dragons)",
                            Page = 1040,
                            ReleaseDate = new DateTime(2011, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("11223344-5566-7788-99aa-bbccddeeff00")
                        });
                });

            modelBuilder.Entity("LibraryAutomation.Entity.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11223344-5566-7788-99aa-bbccddeeff00"),
                            CreatedDate = new DateTime(2023, 10, 11, 15, 52, 42, 284, DateTimeKind.Local).AddTicks(7893),
                            Email = "library@mail.com",
                            LastName = "Account",
                            Name = "Library",
                            Phone = "+1234567899"
                        });
                });

            modelBuilder.Entity("LibraryAutomation.Entity.Entities.Book", b =>
                {
                    b.HasOne("LibraryAutomation.Entity.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAutomation.Entity.Entities.User", "User")
                        .WithMany("Books")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryAutomation.Entity.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryAutomation.Entity.Entities.User", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
